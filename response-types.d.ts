/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON Schema for GitHub API Response Types
 */
export interface RootSchemaInterfaceToDiscard {
  Download?: Download;
  EventActor?: EventActor;
  File?: File;
  FileContents?: FileContents;
  RepoReadmeFile?: RepoReadmeFile;
  FileSlug?: FileSlug;
  Gist?: Gist;
  GitBlob?: GitBlob;
  RepoBranch?: RepoBranch;
  GitCommit?: GitCommit;
  CommitSlugMaybe?: CommitSlugMaybe;
  GitPatch?: GitPatch;
  GitRefObject?: GitRefObject;
  GitRef?: GitRef;
  RepoIssue?: RepoIssue;
  IssueComment?: IssueComment;
  IssueEvent?: IssueEvent;
  IssueLabel?: IssueLabel;
  OrganizationPlan?: OrganizationPlan;
  Organization?: Organization;
  OrganizationSlug?: OrganizationSlug;
  OrganizationSlug2?: OrganizationSlug2;
  OrganizationSlug3?: OrganizationSlug3;
  RootRate?: RootRate;
  RateResources?: RateResources;
  RateRate?: RateRate;
  RepoComment?: RepoComment;
  RepoCommitSingle?: RepoCommitSingle;
  RepoCommitSingleSlug?: RepoCommitSingleSlug;
  RepoCommitItem?: RepoCommitItem;
  RepoCommitItemSlug1?: RepoCommitItemSlug1;
  RepoCommitItemSlug2?: RepoCommitItemSlug2;
  RepoDiffStats?: RepoDiffStats;
  RepoCommitStatus?: RepoCommitStatus;
  RepoContributors?: RepoContributors;
  RepoStatsContributors?: RepoStatsContributors;
  RepoStatsContributorsWeek?: RepoStatsContributorsWeek;
  RepoStatsCommits?: RepoStatsCommits;
  RepoDeployment?: RepoDeployment;
  RepoEvent?: RepoEvent;
  RepoEventPayload?: RepoEventPayload;
  RepoPagesBuild?: RepoPagesBuild;
  RepoPagesBuildError?: RepoPagesBuildError;
  RepoPermission?: RepoPermission;
  RepoPullRequest?: RepoPullRequest;
  RepoPullRequestRef?: RepoPullRequestRef;
  RepoPullRequestReview?: RepoPullRequestReview;
  RepoStatsParticipation?: RepoStatsParticipation;
  RepoSlug?: RepoSlug;
  RepoSubscription?: RepoSubscription;
  RepoTrafficClones?: RepoTrafficClones;
  RepoTrafficReferrer?: RepoTrafficReferrer;
  RepoTrafficPath?: RepoTrafficPath;
  RepoTrafficViews?: RepoTrafficViews;
  RepoTrafficView?: RepoTrafficView;
  Repository?: Repository;
  RepositoryPermissions?: RepositoryPermissions;
  RootFeeds?: RootFeeds;
  RootLicense?: RootLicense;
  RootMeta?: RootMeta;
  RootNotification?: RootNotification;
  RootNotificationSubject?: RootNotificationSubject;
  RootTeam?: RootTeam;
  Stargazer?: Stargazer;
  UserWithName?: UserWithName;
  UserNoName?: UserNoName;
  UserEmail?: UserEmail;
  UserSlug?: UserSlug;
  [k: string]: any;
}
export interface Download {
  url: string;
  id: number;
  html_url: string;
  name: string;
  description: string;
  created_at: string;
  size: number;
  download_count: number;
  content_type: string;
}
export interface EventActor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id?: string;
  url: string;
  avatar_url: string;
}
export interface File {
  content: CommitSlugMaybe;
  commit: GitCommit;
}
export interface CommitSlugMaybe {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string;
  git_url: string;
  download_url: string;
  type: string;
  _links: {
    [k: string]: any;
  };
}
export interface GitCommit {
  sha: string;
  url: string;
  html_url: string;
  author: UserSlug;
  committer: UserSlug;
  tree: GitBlob;
  message: string;
  parents: CommitSlugMaybe[];
}
export interface UserSlug {
  name: string;
  email: string;
  date: string;
}
export interface GitBlob {
  sha: string;
  url: string;
}
export interface FileContents {
  filename: string;
  type: string;
  language: string;
  raw_url: string;
  size: number;
  truncated: boolean;
  content: string;
}
export interface RepoReadmeFile {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string;
  git_url: string;
  download_url: string;
  type: "file";
  content: string;
  encoding: "base64";
  _links: {
    [k: string]: any;
  };
}
export interface FileSlug {
  filename: string;
  type: string;
  language?: string;
  raw_url: string;
  size: number;
}
export interface Gist {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [k: string]: any;
  };
  created_at: string;
  updated_at: string;
  description?: string;
  user?: UserWithName;
  comments_url: string;
  owner?: UserWithName;
  truncated: boolean;
}
export interface UserWithName {
  login: string;
  name: string;
  id: number;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: "User" | "Organization" | "Bot";
  site_admin: boolean;
}
export interface RepoBranch {
  name: string;
  commit: GitBlob;
}
export interface GitPatch {
  sha: string;
  filename: string;
  status: string;
  additions: number;
  deletions: number;
  changes: number;
  blob_url: string;
  raw_url: string;
  contents_url: string;
  patch: string;
}
export interface GitRefObject {
  sha: string;
  type: string;
  url: string;
}
export interface GitRef {
  ref: string;
  url: string;
  object: GitRefObject;
}
export interface RepoIssue {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  number: number;
  title: string;
  user: UserNoName;
  labels: IssueLabel[];
  state: "open" | "closed";
  locked: boolean;
  assignee?: UserNoName;
  assignees: UserNoName[];
  milestone?: {
    [k: string]: any;
  };
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at?: string;
  body?: string;
  closed_by?: UserNoName;
}
export interface UserNoName {
  login: string;
  id: number;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: "User" | "Organization" | "Bot";
  site_admin: boolean;
}
export interface IssueLabel {
  id: number;
  url: string;
  name: string;
  color: string;
  default: boolean;
}
export interface IssueComment {
  url: string;
  html_url: string;
  issue_url: string;
  id: number;
  user: UserNoName;
  created_at: string;
  updated_at: string;
  body: string;
}
export interface IssueEvent {
  id: number;
  url: string;
  actor: UserNoName;
  event: string;
  commit_id?: {
    [k: string]: any;
  };
  commit_url?: {
    [k: string]: any;
  };
  created_at: string;
  RepoIssue?: RepoIssue;
}
export interface OrganizationPlan {
  name: string;
  space: number;
  private_repos: number;
  filled_seats: number;
  seats: number;
}
export interface Organization {
  login: string;
  id: number;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description?: {
    [k: string]: any;
  };
  has_organization_projects: boolean;
  has_repository_projects: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  html_url: string;
  created_at: string;
  updated_at: string;
  type: string;
  total_private_repos: number;
  owned_private_repos: number;
  private_gists: number;
  disk_usage: number;
  collaborators: number;
  billing_email: string;
  plan: OrganizationPlan;
  default_repository_permission: string;
  members_can_create_repositories?: {
    [k: string]: any;
  };
}
export interface OrganizationSlug {
  login: string;
  id: number;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description?: string;
}
export interface OrganizationSlug2 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
export interface OrganizationSlug3 {
  id: number;
  login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
export interface RootRate {
  resources: RateResources;
  rate: RateRate;
}
export interface RateResources {
  core: RateRate;
  search: RateRate;
  graphql: RateRate;
}
export interface RateRate {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RepoComment {
  url: string;
  html_url: string;
  id: number;
  user: UserNoName;
  position?: {
    [k: string]: any;
  };
  line?: {
    [k: string]: any;
  };
  path?: {
    [k: string]: any;
  };
  commit_id: string;
  created_at: string;
  updated_at: string;
  body: string;
}
export interface RepoCommitSingle {
  sha: string;
  commit: RepoCommitSingleSlug;
  url: string;
  html_url: string;
  comments_url: string;
  author: UserNoName;
  committer: UserNoName;
  parents: RepoCommitSingleSlug[];
  stats: RepoDiffStats;
  files: GitPatch[];
}
export interface RepoCommitSingleSlug {
  author: UserSlug;
  committer: UserSlug;
  message: string;
  tree: GitBlob;
  url: string;
  comment_count: number;
}
export interface RepoDiffStats {
  total: number;
  additions: number;
  deletions: number;
}
export interface RepoCommitItem {
  sha: string;
  commit: RepoCommitItemSlug1;
  url: string;
  html_url: string;
  comments_url: string;
  author: UserNoName;
  committer: UserNoName;
  parents: RepoCommitItemSlug2[];
  stats?: RepoDiffStats;
}
export interface RepoCommitItemSlug1 {
  author: UserSlug;
  committer: UserSlug;
  message: string;
  url: string;
  comment_count: number;
  tree: GitBlob;
}
export interface RepoCommitItemSlug2 {
  sha: string;
  url: string;
  html_url: string;
}
export interface RepoCommitStatus {
  state: "pending" | "success" | "error" | "failure";
  statuses: {
    [k: string]: any;
  }[];
  sha: string;
  total_count: number;
  commit_url: string;
  url: string;
  repository: RepoSlug;
}
export interface RepoSlug {
  id: number;
  name: string;
  url: string;
}
export interface RepoContributors {
  login: string;
  id: number;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: "User" | "Organization" | "Bot";
  site_admin: boolean;
  contributions: number;
}
export interface RepoStatsContributors {
  author: UserWithName;
  total: number;
  weeks: RepoStatsContributorsWeek[];
}
export interface RepoStatsContributorsWeek {
  w: string;
  a: number;
  d: number;
  c: number;
}
export interface RepoStatsCommits {
  days: number[];
  total: number;
  week: number;
}
export interface RepoDeployment {
  url: string;
  id: number;
  sha: string;
  ref: string;
  task: "deploy";
  payload: {
    [k: string]: any;
  };
  environment: string;
  description?: string;
  creator: UserNoName;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;
}
export interface RepoEvent {
  id: string;
  type: string;
  actor: EventActor;
  repo: RepoSlug;
  payload: RepoEventPayload;
  public: boolean;
  created_at: string;
}
export interface RepoEventPayload {
  member?: UserWithName;
  action?: string;
}
export interface RepoPagesBuild {
  url: string;
  status: "built";
  error: RepoPagesBuildError;
  pusher: UserNoName;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
}
export interface RepoPagesBuildError {
  message?: {
    [k: string]: any;
  };
}
export interface RepoPermission {
  permission: "admin" | "read" | "write";
  user: UserNoName;
  url: string;
}
export interface RepoPullRequest {
  url: string;
  comments_url: string;
  html_url: string;
  id: number;
  number: number;
  title: string;
  user: UserNoName;
  state: "open" | "closed";
  locked: boolean;
  assignee?: UserNoName;
  assignees: UserWithName[];
  milestone?: {
    [k: string]: any;
  };
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at?: string;
  body?: string;
  closed_by?: UserNoName;
  merged_at?: string;
  merge_commit_sha?: string;
  requested_reviewers: UserWithName[];
  review_comments_url: string;
  review_comment_url: string;
  statuses_url: string;
  head: RepoPullRequestRef;
  base: RepoPullRequestRef;
  _links: {
    [k: string]: any;
  };
  merged: boolean;
  mergeable?: boolean;
  rebaseable?: {
    [k: string]: any;
  };
  mergeable_state: "unknown";
  merged_by?: UserNoName;
  review_comments: number;
  maintainer_can_modify: boolean;
  commits: number;
  additions: number;
  deletions: number;
  changed_files: number;
}
export interface RepoPullRequestRef {
  label: string;
  ref: string;
  sha: string;
  user: UserNoName;
  repo: Repository;
}
export interface Repository {
  id: number;
  name: string;
  full_name: string;
  owner: UserNoName;
  private: boolean;
  html_url: string;
  description?: string;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage?: {
    [k: string]: any;
  };
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language?: string;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url?: {
    [k: string]: any;
  };
  open_issues_count: number;
  forks?: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
  permissions?: RepositoryPermissions;
}
export interface RepositoryPermissions {
  admin: boolean;
  push: boolean;
  pull: boolean;
}
export interface RepoPullRequestReview {
  id: number;
  user: UserNoName;
  body: string;
  state: "COMMENTED" | "APPROVED" | "REQUESTED_CHANGES" | "PENDING";
  html_url: string;
  pull_request_url: string;
  _links: {
    [k: string]: any;
  };
  submitted_at: string;
  commit_id: string;
  url?: string;
}
export interface RepoStatsParticipation {
  all?: number[];
  owner?: number[];
  url?: string;
}
export interface RepoSubscription {
  subscribed: boolean;
  ignored: boolean;
  reason?: {
    [k: string]: any;
  };
  created_at: string;
  url: string;
  repository_url: string;
}
export interface RepoTrafficClones {
  clones: {
    [k: string]: any;
  }[];
  url: string;
  count: number;
  uniques: number;
}
export interface RepoTrafficReferrer {
  referrer: string;
  count: number;
  uniques: number;
}
export interface RepoTrafficPath {
  path: string;
  title: string;
  count: number;
  uniques: number;
}
export interface RepoTrafficViews {
  views: RepoTrafficView[];
  url: string;
  count: number;
  uniques: number;
}
export interface RepoTrafficView {
  timestamp: string;
  count: number;
  uniques: number;
}
export interface RootFeeds {
  timeline_url: string;
  user_url: string;
  current_user_public_url: string;
  _links: {
    [k: string]: any;
  };
  url?: string;
}
export interface RootLicense {
  key: string;
  name: string;
  spdx_id: string;
  url: string;
  featured: boolean;
}
export interface RootMeta {
  verifiable_password_authentication: boolean;
  github_services_sha: string;
  hooks: string[];
  git: string[];
  pages: string[];
  importer: string[];
  url: string;
}
export interface RootNotification {
  id: string;
  unread: boolean;
  reason:
    | "assign"
    | "author"
    | "comment"
    | "invitation"
    | "manual"
    | "mention"
    | "state_change"
    | "subscribed"
    | "team_mention"
    | "review_requested"
    | "review_request_removed";
  updated_at: string;
  last_read_at?: string;
  subject: RootNotificationSubject;
  repository: RepoSlug;
  url: string;
  subscription_url: string;
}
export interface RootNotificationSubject {
  title: string;
  url: string;
  latest_comment_url?: string;
  type: "Issue" | "PullRequest" | "Release";
}
export interface RootTeam {
  name: string;
  id: number;
  slug: string;
  description?: string;
  privacy: "secret" | "closed";
  url: string;
  members_url: string;
  repositories_url: string;
  permission: "push" | "pull" | "admin";
  members_count: number;
  repos_count: number;
  organization: OrganizationSlug;
}
export interface Stargazer {
  starred_at: string;
  repo?: Repository;
}
export interface UserEmail {
  email: string;
  primary: boolean;
  verified: boolean;
  visibility?: "public" | "private";
}
