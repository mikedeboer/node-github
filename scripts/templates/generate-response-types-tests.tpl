const chai = require('chai')
const fixtures = require('@octokit/fixtures')

const GitHub = require('../')

const mocha = require('mocha')
const {describe, it} = mocha
chai.should()

const RESPONSE_TYPES = require('../scripts/response-types.json')

const OPTIONAL_GH_TOKEN = process.env['GH_TOKEN']

const PARAM_VALUES = {
  owner: 'octokit',
  repo: 'rest.js',
  username: 'philschatz',
  // ... add more fields here
}

function log(...args) {
  if (process.env['DEBUG']) {
    console.log(...args)
  }
}

function newGitHub() {
  const octokit = new GitHub()
  if (OPTIONAL_GH_TOKEN) {
    octokit.authenticate({
      type: 'token',
      token: OPTIONAL_GH_TOKEN
    })
  }
  return octokit
}

function reifyParams(params) {
  const ret = {}
  Object.entries(params).forEach(([paramName, {required}]) => {
    if (PARAM_VALUES[paramName]) {
      ret[paramName] = PARAM_VALUES[paramName]
    } else if (required) {
      throw new Error(`Value for required param is missing. Please add "${paramName}" to PARAM_VALUES in generate-response-types-tests.tpl`)
    } // otherwise: not required so it is ok if we skip
  })
  return ret
}

function validateType(ancestorPath, data, expectedType, expectedArray) {
  if (!data) {
    throw new Error(`"${ancestorPath}": Bug: data is Undefined but the expectedType was ${expectedType}`)
  }
  if (expectedArray) {
    if (Array.isArray(data)) {
      data.forEach((item) => {
        validateType(ancestorPath, item, expectedType)
      })
    } else {
      throw new Error(`"${ancestorPath}": Bug: expected an array but did not get one. Got the following instead: ${JSON.stringify(data)}`)
    }
  } else {
    log(`Validating... expectedType="${expectedType}". data=${JSON.stringify(data)}`)
    if (RESPONSE_TYPES[expectedType]) {
      Object.entries(RESPONSE_TYPES[expectedType]).forEach(([fieldName, {type, type_enum, required}]) => {
        const pathToMe = `${ancestorPath}->.${fieldName}(${type || 'ENUM'})`
        if (typeof data[fieldName] !== 'undefined') {
          if (type) {
            // check if we need to recurse
            switch (type) {
              case 'string':
              case 'number':
              case 'boolean':
              case 'json':
                // TODO: Validate that the value is a string or a number
                return
              case 'any':
                console.log(`Warning: response-types.json contains an Any field inside "${expectedType}". Ignoring for now`)
                return
              default:
                // Recurse
                log(`Recursing on type="${type}" and data=${JSON.stringify(data[fieldName])}`)
                validateType(pathToMe, data[fieldName], type)
            }
          } else if (type_enum) {
            if (type_enum.indexOf(data[fieldName]) < 0) {
              throw new Error(`"${pathToMe}": BUG: Entry "${fieldName}" in response-types.json is an Enum but none of the values are "${data[fieldName]}". Valid ones are ${JSON.stringify(type_enum)}`)
            }
          } else {
            throw new Error(`"${pathToMe}": BUG: Entry "${fieldName}" in response-types.json is missing either a type or a type_enum field`)
          }
        } else if (required) {
          throw new Error(`"${pathToMe}": BUG: Entry "${fieldName}" is marked as required but it is not found on this object`)
        }
      })
    } else {
      throw new Error(`"${ancestorPath}": Type named ${expectedType} is missing from response-types.json. Please add it`)
    }
    log(`Validated... expectedType="${expectedType}"`)
  }
}

describe('Autogenerated Response Type Tests', () => {
  {{#each methodsToTest}}
    it('Responds with a "{{yields}}" when calling octokit.{{sectionName}}.{{methodName}}(...)', async () => {
      const expectedEmpty = {{yieldsIsEmpty}}
      const expectedArray = {{yieldsArray}}
      const expectedType = "{{yields}}"
      const params = reifyParams({{& params}})
      const octokit = newGitHub()
      const {data} = await octokit.{{sectionName}}.{{methodName}}(params)
      validateType(`(${expectedType})`, data, expectedType, expectedArray)
    })
  {{/each}}
})
